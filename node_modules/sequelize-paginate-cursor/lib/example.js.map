{"version":3,"sources":["../src/example.js"],"names":["debug","error","config","database","process","env","DATABASE","username","USERNAME","password","PASSWORD","dialect","DIALECT","port","PORT","sequelize","checkConnection","connect","authenticate","err","Error","createModel","User","define","firstName","type","STRING","field","lastName","timestamps","freezeTableName","createRecord","model","data","recordCreated","create","searchUsers","parameters","paginate","randomString","len","string","Math","random","toString","replace","substr","then","sync","force","setInterval","user","sinceId","stdin","on","text","limit","reverse","objects","nextCursor","catch"],"mappings":"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","file":"example.js","sourcesContent":["/**\n * Created by mirabalj on 10/11/16.\n */\nimport dotenv from 'dotenv';\nimport Sequelize from 'sequelize';\nimport _debug from 'debug';\nimport pagination from '../lib/pagination';\n\nconst debug = _debug('sequelizeCursor:connection');\nconst error = _debug('sequelizeCursor:error');\n\ndotenv.config();\n\nconst database = process.env.DATABASE || 'example';\nconst username = process.env.USERNAME || 'root';\nconst password = process.env.PASSWORD;\nconst dialect = process.env.DIALECT || 'mysql';\nconst port = process.env.PORT || 3306;\n\nconst sequelize = new Sequelize(database, username, password, {\n  dialect,\n  port,\n});\n\n/**\n * Check the connection to database\n * @returns Promise\n */\nexport const checkConnection = async () => {\n  let connect;\n  try {\n    connect = await sequelize.authenticate();\n  } catch (err) {\n    throw Error('SEQUELIZE ERROR CONNECTION');\n  }\n  return connect;\n};\n\n/**\n * Create User model\n * @returns {Model}\n */\nexport const createModel = () => {\n  const User = sequelize.define('user', {\n    firstName: {\n      type: Sequelize.STRING,\n      field: 'first_name',\n    },\n    lastName: {\n      type: Sequelize.STRING,\n      field: 'last_name',\n    },\n  }, {\n    timestamps: false, // Not timestamps\n    freezeTableName: true, // Model tableName will be the same as the model name\n  });\n  pagination(User);\n  return User;\n};\n\n/**\n * Create a record in a table\n * @param Model, Data\n * @returns Promise\n */\nexport const createRecord = async (model, data) => {\n  let recordCreated;\n  if (model) {\n    recordCreated = await model.create(data);\n  }\n  return recordCreated;\n};\n\n/**\n * Search users with paginate parameters\n * @param {parameters}\n * @returns Promise\n */\nexport const searchUsers = async (parameters) => {\n  const User = createModel();\n  return await User.paginate(parameters);\n};\n\n/**\n * Generate a random string\n * @param len\n * @returns {string}\n */\nexport const randomString = (len) => {\n  const string = Math.random().toString(36).replace(/[^a-z]+/g, '');\n  return string.substr(0, len);\n};\n\n// Validate the connection\nconst connect = checkConnection();\nconnect.then(() => {\n  // Create a user model\n  const model = createModel();\n  // Recreate model\n  model.sequelize.sync({\n    force: true,\n  });\n  // Save a random record each 10 seconds\n  setInterval(async () => {\n    debug('will create new user');\n    try {\n      // Data with random string\n      const user = await createRecord(model, {\n        firstName: randomString(24),\n        lastName: randomString(24),\n      });\n      debug('created', user);\n    } catch (err) {\n      error(err);\n    }\n  }, 10000);\n  let sinceId = null;\n  // Execute a paginate with push key\n  process.stdin.on('data', async(text) => {\n    debug('input', text);\n    try {\n      const { objects, nextCursor } = await model.paginate({\n        limit: 3,\n        sinceId,\n        reverse: false,\n      });\n      sinceId = nextCursor;\n      debug('paged', { objects, nextCursor });\n    } catch (err) {\n      error(err);\n    }\n  });\n}).catch((err) => {\n  error(err);\n});\n"]}