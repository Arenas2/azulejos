'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomString = exports.searchUsers = exports.createRecord = exports.createModel = exports.checkConnection = undefined;

var _dotenv = require('dotenv');

var _dotenv2 = _interopRequireDefault(_dotenv);

var _sequelize = require('sequelize');

var _sequelize2 = _interopRequireDefault(_sequelize);

var _debug2 = require('debug');

var _debug3 = _interopRequireDefault(_debug2);

var _pagination = require('../lib/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Created by mirabalj on 10/11/16.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */


const debug = (0, _debug3.default)('sequelizeCursor:connection');
const error = (0, _debug3.default)('sequelizeCursor:error');

_dotenv2.default.config();

const database = process.env.DATABASE || 'example';
const username = process.env.USERNAME || 'root';
const password = process.env.PASSWORD;
const dialect = process.env.DIALECT || 'mysql';
const port = process.env.PORT || 3306;

const sequelize = new _sequelize2.default(database, username, password, {
  dialect: dialect,
  port: port
});

/**
 * Check the connection to database
 * @returns Promise
 */
const checkConnection = exports.checkConnection = (() => {
  var _ref = _asyncToGenerator(function* () {
    let connect;
    try {
      connect = yield sequelize.authenticate();
    } catch (err) {
      throw Error('SEQUELIZE ERROR CONNECTION');
    }
    return connect;
  });

  return function checkConnection() {
    return _ref.apply(this, arguments);
  };
})();

/**
 * Create User model
 * @returns {Model}
 */
const createModel = exports.createModel = () => {
  const User = sequelize.define('user', {
    firstName: {
      type: _sequelize2.default.STRING,
      field: 'first_name'
    },
    lastName: {
      type: _sequelize2.default.STRING,
      field: 'last_name'
    }
  }, {
    timestamps: false, // Not timestamps
    freezeTableName: true // Model tableName will be the same as the model name
  });
  (0, _pagination2.default)(User);
  return User;
};

/**
 * Create a record in a table
 * @param Model, Data
 * @returns Promise
 */
const createRecord = exports.createRecord = (() => {
  var _ref2 = _asyncToGenerator(function* (model, data) {
    let recordCreated;
    if (model) {
      recordCreated = yield model.create(data);
    }
    return recordCreated;
  });

  return function createRecord(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
})();

/**
 * Search users with paginate parameters
 * @param {parameters}
 * @returns Promise
 */
const searchUsers = exports.searchUsers = (() => {
  var _ref3 = _asyncToGenerator(function* (parameters) {
    const User = createModel();
    return yield User.paginate(parameters);
  });

  return function searchUsers(_x3) {
    return _ref3.apply(this, arguments);
  };
})();

/**
 * Generate a random string
 * @param len
 * @returns {string}
 */
const randomString = exports.randomString = len => {
  const string = Math.random().toString(36).replace(/[^a-z]+/g, '');
  return string.substr(0, len);
};

// Validate the connection
const connect = checkConnection();
connect.then(() => {
  // Create a user model
  const model = createModel();
  // Recreate model
  model.sequelize.sync({
    force: true
  });
  // Save a random record each 10 seconds
  setInterval(_asyncToGenerator(function* () {
    debug('will create new user');
    try {
      // Data with random string
      const user = yield createRecord(model, {
        firstName: randomString(24),
        lastName: randomString(24)
      });
      debug('created', user);
    } catch (err) {
      error(err);
    }
  }), 10000);
  let sinceId = null;
  // Execute a paginate with push key
  process.stdin.on('data', (() => {
    var _ref5 = _asyncToGenerator(function* (text) {
      debug('input', text);
      try {
        var _ref6 = yield model.paginate({
          limit: 3,
          sinceId: sinceId,
          reverse: false
        });

        const objects = _ref6.objects,
              nextCursor = _ref6.nextCursor;

        sinceId = nextCursor;
        debug('paged', { objects: objects, nextCursor: nextCursor });
      } catch (err) {
        error(err);
      }
    });

    return function (_x4) {
      return _ref5.apply(this, arguments);
    };
  })());
}).catch(err => {
  error(err);
});
//# sourceMappingURL=example.js.map